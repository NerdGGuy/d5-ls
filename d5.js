// Generated by LiveScript 1.2.0
(function(){
  var map;
  map = require('prelude-ls').map;
  this.d5 = function(d3array){
    return {
      attr: function(name, value){
        return d5(
        map(function(it){
          return it.attr(name, value);
        }, d3array));
      },
      classed: function(name, value){
        return d5(
        map(function(it){
          return it.classed(name, value);
        }, d3array));
      },
      style: function(name, value, priority){
        return d5(
        map(function(it){
          return it.style(name, value, priority);
        }, d3array));
      },
      property: function(name, value){
        return d5(
        map(function(it){
          return it.propery(name, value);
        }, d3array));
      },
      text: function(value){
        return d5(
        map(function(it){
          return it.text(value);
        }, d3array));
      },
      html: function(value){
        return d5(
        map(function(it){
          return it.html(value);
        }, d3array));
      },
      append: function(name){
        return d5(
        map(function(it){
          return it.append(name);
        }, d3array));
      },
      insert: function(name, before){
        return d5(
        map(function(it){
          return it.insert(name, before);
        }, d3array));
      },
      remove: function(){
        return d5(
        map(function(it){
          return it.remove();
        }, d3array));
      },
      data: function(value, key){
        return d5(
        map(function(it){
          return it.data(value, key);
        }, d3array));
      },
      enter: function(){
        return d5(
        map(function(it){
          return it.enter();
        }, d3array));
      },
      exit: function(){
        return d5(
        map(function(it){
          return it.exit();
        }, d3array));
      },
      datum: function(value){
        return d5(
        map(function(it){
          return it.datum(value);
        }, d3array));
      },
      filter: function(selector){
        return d5(
        map(function(it){
          return it.filter(value);
        }, d3array));
      },
      sort: function(comparator){
        return d5(
        map(function(it){
          return it.sort(comparator);
        }, d3array));
      },
      order: function(){
        return d5(
        map(function(it){
          return it.order();
        }, d3array));
      },
      on: function(type, listener, capture){
        return d5(
        map(function(it){
          return it.style(type, listener, capture);
        }, d3array));
      },
      transition: function(){
        return d5(
        map(function(it){
          return it.transition();
        }, d3array));
      },
      interrupt: function(){
        return d5(
        map(function(it){
          return it.interrupt();
        }, d3array));
      },
      each: function(f){
        return d5(
        map(function(it){
          return it.each(f);
        }, d3array));
      },
      call: function(f){
        return d5(
        map(function(it){
          return it.call(f(arguments));
        }, d3array));
      },
      empty: function(f){
        return map(function(it){
          return it.each(f);
        }, d3array);
      },
      node: function(){
        return map(function(it){
          return it.node();
        }, d3array);
      },
      size: function(){
        return map(function(it){
          return it.size();
        }, d3array);
      },
      select: function(selector){
        return d5(
        map(function(it){
          return it.select(selector);
        }, d3array));
      },
      selectAll: function(selector){
        return d5(
        map(function(it){
          return it.selectAll(selector);
        }, d3array));
      }
    };
  };
}).call(this);
