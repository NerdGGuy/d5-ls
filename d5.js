// Generated by LiveScript 1.2.0
(function(){
  var map, d5;
  map = require('prelude-ls').map;
  this.d5 = d5 = (function(){
    d5.displayName = 'd5';
    var prototype = d5.prototype, constructor = d5;
    function d5(d3array){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.d3array = d3array;
      this$.selectAll = bind$(this$, 'selectAll', prototype);
      this$.select = bind$(this$, 'select', prototype);
      this$.size = bind$(this$, 'size', prototype);
      this$.node = bind$(this$, 'node', prototype);
      this$.empty = bind$(this$, 'empty', prototype);
      this$.call = bind$(this$, 'call', prototype);
      this$.each = bind$(this$, 'each', prototype);
      this$.interrupt = bind$(this$, 'interrupt', prototype);
      this$.transition = bind$(this$, 'transition', prototype);
      this$.on = bind$(this$, 'on', prototype);
      this$.order = bind$(this$, 'order', prototype);
      this$.sort = bind$(this$, 'sort', prototype);
      this$.filter = bind$(this$, 'filter', prototype);
      this$.datum = bind$(this$, 'datum', prototype);
      this$.exit = bind$(this$, 'exit', prototype);
      this$.enter = bind$(this$, 'enter', prototype);
      this$.data = bind$(this$, 'data', prototype);
      this$.remove = bind$(this$, 'remove', prototype);
      this$.insert = bind$(this$, 'insert', prototype);
      this$.append = bind$(this$, 'append', prototype);
      this$.html = bind$(this$, 'html', prototype);
      this$.text = bind$(this$, 'text', prototype);
      this$.property = bind$(this$, 'property', prototype);
      this$.style = bind$(this$, 'style', prototype);
      this$.classed = bind$(this$, 'classed', prototype);
      this$.attr = bind$(this$, 'attr', prototype);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.attr = function(name, value){
      return d5(
      map(function(it){
        return it.attr(name, value);
      }, this.d3array));
    };
    prototype.classed = function(name, value){
      return d5(
      map(function(it){
        return it.classed(name, value);
      }, this.d3array));
    };
    prototype.style = function(name, value, priority){
      return d5(
      map(function(it){
        return it.style(name, value, priority);
      }, this.d3array));
    };
    prototype.property = function(name, value){
      return d5(
      map(function(it){
        return it.propery(name, value);
      }, this.d3array));
    };
    prototype.text = function(value){
      return d5(
      map(function(it){
        return it.text(value);
      }, this.d3array));
    };
    prototype.html = function(value){
      return d5(
      map(function(it){
        return it.html(value);
      }, this.d3array));
    };
    prototype.append = function(name){
      return d5(
      map(function(it){
        return it.append(name);
      }, this.d3array));
    };
    prototype.insert = function(name, before){
      return d5(
      map(function(it){
        return it.insert(name, before);
      }, this.d3array));
    };
    prototype.remove = function(){
      return d5(
      map(function(it){
        return it.remove();
      }, this.d3array));
    };
    prototype.data = function(value, key){
      return d5(
      map(function(it){
        return it.data(value, key);
      }, this.d3array));
    };
    prototype.enter = function(){
      return d5(
      map(function(it){
        return it.enter();
      }, this.d3array));
    };
    prototype.exit = function(){
      return d5(
      map(function(it){
        return it.exit();
      }, this.d3array));
    };
    prototype.datum = function(value){
      return d5(
      map(function(it){
        return it.datum(value);
      }, this.d3array));
    };
    prototype.filter = function(selector){
      return d5(
      map(function(it){
        return it.filter(value);
      }, this.d3array));
    };
    prototype.sort = function(comparator){
      return d5(
      map(function(it){
        return it.sort(comparator);
      }, this.d3array));
    };
    prototype.order = function(){
      return d5(
      map(function(it){
        return it.order();
      }, this.d3array));
    };
    prototype.on = function(type, listener, capture){
      return d5(
      map(function(it){
        return it.style(type, listener, capture);
      }, this.d3array));
    };
    prototype.transition = function(){
      return d5(
      map(function(it){
        return it.transition();
      }, this.d3array));
    };
    prototype.interrupt = function(){
      return d5(
      map(function(it){
        return it.interrupt();
      }, this.d3array));
    };
    prototype.each = function(f){
      return d5(
      map(function(it){
        return it.each(f);
      }, this.d3array));
    };
    prototype.call = function(f){
      return d5(
      map(function(it){
        return it.call(f(arguments));
      }, this.d3array));
    };
    prototype.empty = function(f){
      return map(function(it){
        return it.each(f);
      }, this.d3array);
    };
    prototype.node = function(){
      return map(function(it){
        return it.node();
      }, this.d3array);
    };
    prototype.size = function(){
      return map(function(it){
        return it.size();
      }, this.d3array);
    };
    prototype.select = function(selector){
      return d5(
      map(function(it){
        return it.select(selector);
      }, this.d3array));
    };
    prototype.selectAll = function(selector){
      return d5(
      map(function(it){
        return it.selectAll(selector);
      }, this.d3array));
    };
    return d5;
  }());
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
